{"ast":null,"code":"document.addEventListener('DOMContentLoaded', () => {\n  const registerForm = document.getElementById('registerForm');\n  const emailInput = document.getElementById('email');\n  const passwordInput = document.getElementById('password');\n  const nameInput = document.getElementById('name');\n  const errorMessage = document.getElementById('error-message');\n\n  // Expresión regular para validar la contraseña\n  const passwordRegex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  registerForm.addEventListener('submit', async event => {\n    event.preventDefault(); // Evita que el formulario se envíe inmediatamente\n\n    const name = nameInput.value.trim();\n    const email = emailInput.value.trim();\n    const password = passwordInput.value.trim();\n\n    // Validar si algún campo está vacío\n    if (name === '' || email === '' || password === '' || confirmPassword === '') {\n      errorMessage.textContent = 'Por favor, completa todos los campos.';\n      errorMessage.style.display = 'block';\n    }\n    // Validar si la contraseña cumple con los requisitos\n    else if (!passwordRegex.test(password)) {\n      errorMessage.textContent = 'La contraseña debe tener al menos 8 caracteres, una mayúscula, un número y un carácter especial.';\n      errorMessage.style.display = 'block';\n    }\n    // Si todo está bien, se oculta el mensaje de error\n    else {\n      errorMessage.style.display = 'none';\n\n      // Crear un objeto con los datos del formulario\n      const formData = new FormData(registerForm);\n      try {\n        // Enviar los datos al servidor usando fetch\n        const response = await fetch('00ConexionNewUser.php', {\n          method: 'POST',\n          body: formData\n        });\n        const result = await response.text();\n        console.log(result);\n        if (response.ok) {\n          alert('Registro exitoso');\n          window.location.href = 'login.php';\n        } else {\n          errorMessage.textContent = 'Hubo un error al registrar. Intenta nuevamente.';\n          errorMessage.style.display = 'block';\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        errorMessage.textContent = 'Error de conexión. Intenta nuevamente.';\n        errorMessage.style.display = 'block';\n      }\n    }\n  });\n\n  // Establecer la fecha máxima en el campo de fecha (para evitar seleccionar fechas futuras)\n  const today = new Date().toISOString().split('T')[0];\n  document.getElementById('fecha-nacimiento').setAttribute('max', today);\n});","map":{"version":3,"names":["document","addEventListener","registerForm","getElementById","emailInput","passwordInput","nameInput","errorMessage","passwordRegex","event","preventDefault","name","value","trim","email","password","confirmPassword","textContent","style","display","test","formData","FormData","response","fetch","method","body","result","text","console","log","ok","alert","window","location","href","error","today","Date","toISOString","split","setAttribute"],"sources":["D:/UANL/Facu FCFM/8vo Semestre/004 PW2/PTZ/PTZ/front/src/register.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const registerForm = document.getElementById('registerForm');\r\n    const emailInput = document.getElementById('email');\r\n    const passwordInput = document.getElementById('password');\r\n    const nameInput = document.getElementById('name');\r\n    const errorMessage = document.getElementById('error-message');\r\n\r\n    // Expresión regular para validar la contraseña\r\n    const passwordRegex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n\r\n    registerForm.addEventListener('submit', async (event) => {\r\n        event.preventDefault(); // Evita que el formulario se envíe inmediatamente\r\n\r\n        const name = nameInput.value.trim();\r\n        const email = emailInput.value.trim();\r\n        const password = passwordInput.value.trim();\r\n     \r\n\r\n        // Validar si algún campo está vacío\r\n        if (name === '' || email === '' || password === '' || confirmPassword === '') {\r\n            errorMessage.textContent = 'Por favor, completa todos los campos.';\r\n            errorMessage.style.display = 'block';\r\n        }\r\n        // Validar si la contraseña cumple con los requisitos\r\n        else if (!passwordRegex.test(password)) {\r\n            errorMessage.textContent = 'La contraseña debe tener al menos 8 caracteres, una mayúscula, un número y un carácter especial.';\r\n            errorMessage.style.display = 'block';\r\n        } \r\n        // Si todo está bien, se oculta el mensaje de error\r\n        else {\r\n            errorMessage.style.display = 'none';\r\n\r\n            // Crear un objeto con los datos del formulario\r\n            const formData =  new FormData(registerForm);\r\n\r\n\r\n            try {\r\n                // Enviar los datos al servidor usando fetch\r\n                const response = await fetch('00ConexionNewUser.php', {\r\n                    method: 'POST',\r\n                    body: formData \r\n                });\r\n\r\n                const result = await response.text();\r\n                console.log(result);\r\n\r\n                if (response.ok) {\r\n                    alert('Registro exitoso');\r\n                    window.location.href = 'login.php'; \r\n                } else {\r\n                    errorMessage.textContent = 'Hubo un error al registrar. Intenta nuevamente.';\r\n                    errorMessage.style.display = 'block';\r\n                }\r\n            } catch (error) {\r\n                console.error('Error:', error);\r\n                errorMessage.textContent = 'Error de conexión. Intenta nuevamente.';\r\n                errorMessage.style.display = 'block';\r\n            }\r\n        }\r\n    });\r\n\r\n    // Establecer la fecha máxima en el campo de fecha (para evitar seleccionar fechas futuras)\r\n    const today = new Date().toISOString().split('T')[0];\r\n    document.getElementById('fecha-nacimiento').setAttribute('max', today);\r\n\r\n    \r\n});\r\n"],"mappings":"AAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAChD,MAAMC,YAAY,GAAGF,QAAQ,CAACG,cAAc,CAAC,cAAc,CAAC;EAC5D,MAAMC,UAAU,GAAGJ,QAAQ,CAACG,cAAc,CAAC,OAAO,CAAC;EACnD,MAAME,aAAa,GAAGL,QAAQ,CAACG,cAAc,CAAC,UAAU,CAAC;EACzD,MAAMG,SAAS,GAAGN,QAAQ,CAACG,cAAc,CAAC,MAAM,CAAC;EACjD,MAAMI,YAAY,GAAGP,QAAQ,CAACG,cAAc,CAAC,eAAe,CAAC;;EAE7D;EACA,MAAMK,aAAa,GAAG,2DAA2D;EAEjFN,YAAY,CAACD,gBAAgB,CAAC,QAAQ,EAAE,MAAOQ,KAAK,IAAK;IACrDA,KAAK,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;;IAExB,MAAMC,IAAI,GAAGL,SAAS,CAACM,KAAK,CAACC,IAAI,CAAC,CAAC;IACnC,MAAMC,KAAK,GAAGV,UAAU,CAACQ,KAAK,CAACC,IAAI,CAAC,CAAC;IACrC,MAAME,QAAQ,GAAGV,aAAa,CAACO,KAAK,CAACC,IAAI,CAAC,CAAC;;IAG3C;IACA,IAAIF,IAAI,KAAK,EAAE,IAAIG,KAAK,KAAK,EAAE,IAAIC,QAAQ,KAAK,EAAE,IAAIC,eAAe,KAAK,EAAE,EAAE;MAC1ET,YAAY,CAACU,WAAW,GAAG,uCAAuC;MAClEV,YAAY,CAACW,KAAK,CAACC,OAAO,GAAG,OAAO;IACxC;IACA;IAAA,KACK,IAAI,CAACX,aAAa,CAACY,IAAI,CAACL,QAAQ,CAAC,EAAE;MACpCR,YAAY,CAACU,WAAW,GAAG,kGAAkG;MAC7HV,YAAY,CAACW,KAAK,CAACC,OAAO,GAAG,OAAO;IACxC;IACA;IAAA,KACK;MACDZ,YAAY,CAACW,KAAK,CAACC,OAAO,GAAG,MAAM;;MAEnC;MACA,MAAME,QAAQ,GAAI,IAAIC,QAAQ,CAACpB,YAAY,CAAC;MAG5C,IAAI;QACA;QACA,MAAMqB,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,EAAE;UAClDC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEL;QACV,CAAC,CAAC;QAEF,MAAMM,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACpCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;QAEnB,IAAIJ,QAAQ,CAACQ,EAAE,EAAE;UACbC,KAAK,CAAC,kBAAkB,CAAC;UACzBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,WAAW;QACtC,CAAC,MAAM;UACH5B,YAAY,CAACU,WAAW,GAAG,iDAAiD;UAC5EV,YAAY,CAACW,KAAK,CAACC,OAAO,GAAG,OAAO;QACxC;MACJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACZP,OAAO,CAACO,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9B7B,YAAY,CAACU,WAAW,GAAG,wCAAwC;QACnEV,YAAY,CAACW,KAAK,CAACC,OAAO,GAAG,OAAO;MACxC;IACJ;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMkB,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACpDxC,QAAQ,CAACG,cAAc,CAAC,kBAAkB,CAAC,CAACsC,YAAY,CAAC,KAAK,EAAEJ,KAAK,CAAC;AAG1E,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}